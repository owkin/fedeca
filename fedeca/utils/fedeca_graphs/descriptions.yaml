local_levels: "A dictionary whose keys are the names of the categorical factors, and whose values are the list of values taken by this factor in a given center. For example $\\texttt{\\{stage: [Advanced, Non-advanced], gender: [female]\\}}$."
merged_levels: "A dictionary whose keys are the names of the categorical factors and whose values are arrays containing the list of values taken by this factor across all centers. For example $\\texttt{\\{stage: [Advanced , Non-advanced], gender: [female, male]\\}}$."
design_columns: The name of the columns of the local design matrix, before aggregation. They are of the form intercept, factor for continuous factors, and factor\_level\_vs\_factor\_ref\_level otherwise. For example, $\texttt{[intercept, stage\_Advanced\_vs\_Non-advanced, gender\_male\_vs\_female]}$.
merged_columns: The union of the design columns across all centers. Local design matrices will then be updated to include all columns.
contrast: A list of three strings representing the contrast of interest, in case it is not specified by the user. Of the form $\texttt{[factor, level1, level2]}$. For example, $\texttt{[stage, Advanced, Non-advanced]}$.
log_mean: For each gene, the mean of the log of the counts across all samples in a center $\logmean_{k,g} = \tfrac{1}{\nsamples_k}\sum_{i=1}^{\nsamples_k}\log(\counts_{k,i,g})$.
n_samples: The number of samples in a center $\nsamples_k$ for each center $k$.
global_log_mean: The mean of the log of the counts across all samples in all centers $\logmean_g =\sum_{k=1}^{K}\tfrac{\nsamples_k}{n}\logmean_{k,g}$.
local_gram_matrix: The gram matrix of the local design matrix $\gramm_k := \design_k^{\top}\design_k$.
local_features:
  "7": $\xz_{k}  := \design_k^{\top} \ncounts_{k}$.
  "16_42" : For each active gene $g$, the projected features $\design_k^{\top} \wmat_{k,g} \phi_{k,g}$, where $\phi_{k,i,g} = \log\left(\frac{\mean_{k,i,g}}{\sfactor_{i}}\right) + \frac{\counts_{k,i,g} - \mean_{k,i,g}}{\mean_{k,i,g}}$ and $\phi_{k,g}$ is the vector of $(\phi_{k,i,g})_{1 \leq i \leq \nsamples_k}$.
  "77_111": $\xz_{k}  := \design_k^{\top} \ncounts_{k}$, where $\ncounts_{k}$ is the normalized counts in the center $k$ on the set of genes to replace, where the value of Cook's outliers have been replaced using a trimmed mean.
global_feature_vector: The sum of the local features across all centers $\xz = \sum_k \xz_k$.
global_gram_matrix: The sum of the local Gramm matrix across all centers $\gramm = \sum_k \gramm_k$.
local_n_obs: The number of observations in a center $\nsamples_k$.
local_n_params: The number of parameters in a center $\nparams$ (i.e., the number of columns of the design matrix). This number is the same across all centers, but the server does not directly have access to it since it is stateless.
local_rough_dispersions: A rough estimate of the dispersions of the genes on the local data. It is computed as a method of moments estimator of the dispersion of the normalized counts  $\momdispz_{k,g} = \sum_{i=1}^{\nsamples_k}(\ncounts_{k,i,g}^2 - \linz_{k,i,g}^2)/\linz_{k,i,g}^2$ where $\linz_{k,g}= \design_k \gramm^{-1}\xz_g$ corresponds to a linear estimate of the normed counts.
rough_dispersions:
  "10": A rough estimate of the dispersions obtained by essentially averaging local rough dispersions ($\momdispz_g = \max(\tfrac{1}{\nsamples-\nparams}\sum_k\momdispz_{k,g},0)$)
  "11": The rough estimates computed at the previous step and passed on.
  "80": A rough estimate of the dispersions obtained by essentially averaging local rough dispersions ($\momdispz_g = \max(\tfrac{1}{\nsamples-\nparams}\sum_k\momdispz_{k,g},0)$)
  "81": The rough estimates computed at the previous step and passed on.
local_inverse_size_mean: The average of the inverse of the size factors in a center $\invsfmean_k = \tfrac{1}{\nsamples_k}\sum_{i=1}^{\nsamples_k} \tfrac{1}{\sfactor_{k,i}}$.
local_counts_mean: The average of the counts in a center, per gene $\countsmean_{k,g} = \frac{1}{\nsamples_k}\sum_{i=1}^{\nsamples_k}\counts_{k,i,g}$.
local_squared_squared_mean: The average of the square normed counts in a center, per gene $\countssqmean := \tfrac{1}{\nsamples_k}\sum_{i=1}^{\nsamples_k}\counts_{k,i,g}^2$.
MoM_dispersions: The dispersions obtained by the method of moments. First, the aggregated mean counts, squared mean counts and inverse size factors are computed ($\invsfmean = \sum_k{\tfrac{\nsamples_k}{\nsamples}~\invsfmean_k) }$, $\countsmean_g = \sum_{k}{\tfrac{\nsamples_k}{\nsamples}~\countsmean_{k,g}}$, $\countssqmean = \sum_{k}{\tfrac{\nsamples_k}{\nsamples}~\countssqmean_{k,g})}$). The variance is then estimated with $\estvar_g = \tfrac{n}{n-1} (\countssqmean_g - \countsmean_g^2)$ and a method of moments estimate is the constructed as $\momdispy_g = \tfrac{\estvar_g - \invsfmean_g \times \countsmean_g}{\countsmean_g^2}$. The final MoM estimate $\momdisp_g$ for gene $g$ is the clipped value of $\min(\momdispy_g, \momdispz_g)$ between $\mindisp$ and $\max(\maxdisp,\nsamples)$.
non_zero: A boolean array indicating which genes have non-zero counts in at least one center.
tot_num_samples: The total number of samples across all centers $\nsamples$.
tot_counts_mean: The average of the counts across all centers, per gene, obtained by summing the local counts means.
gram_full_rank: A boolean indicating whether the global Gramm matrix $\gramm$ is full rank.
n_non_zero_genes: The number of genes with non-zero counts in at least one center.
local_log_features: $\logfeat_{k} = \design_{k}^{\top} \log(\ncounts_{k}+0.1)$.
beta:
  "15_41_85_110": The initial value of the $\beta$ parameter. If the Gramm matrix is full rank, is set to $\beta_g = G^{-1}(\sum_k\logfeat_{k,g})$ for all genes $g$. Otherwise, it is set as a weighed average of the normed log means, i.e., $\beta_g = \sum_k \tfrac{\nsamples_k}{\nsamples}~\logncountsmean_{k,g}$, where $\logncountsmean_{k,g} = \tfrac{1}{\nsamples_k}\sum_{i=1}^{\nsamples_k}{\log(\ncounts_{k,i,g})}$ is computed locally.
  "16_42_86_111": The log fold change $\beta$ parameter. Not modified.
  "17_43_87_112": The updated value of the $\beta$ parameter after applying the IRLS update for the active genes. At the last step, is not updated. TODO add ref to equations.
  "18_44_88_113": For evert gene $g$, the inital value of the $\beta_g$ parameter for the ProxQuasiNewton algorithm (PQN), which is either i) the value computed by IRLS if IRLS has converged on that gene (in that case, the gene will not be optimized), or ii) the initial value of the $\beta_g$ parameter for the IRLS algorithm, if IRLS has not converged on that gene.
  "19_45_89_114": For each gene $g$, the log fold change $\beta_g$, which remains unchanged during the first iteration of the Proximal Quasi-Newton algorithm.
  "20_22_46_48_90_92_115_117": For each gene $g$, the log fold change $\beta_g$, which is simply passed on.
  "21_23_47_49_91_93_116_118": For each gene $g$, the log fold change $\beta_g$. This value has been updated by the Proximal Quasi-Newton algorithm for all active genes where an admissible step size was found using the Armijo condition (SEE CITE EQU).
irls_diverged_mask:
  "15_41_85_110": A boolean array indicating which non zero genes have caused the IRLS algorithm to diverge. Initialized to $\false$.
  "16_42_86_111" : A boolean array indicating which non zero genes have caused the IRLS algorithm to diverge. Simply passed on.
  "17_43_87_112": A boolean array indicating which non zero genes have caused the IRLS algorithm to diverge. A gene $g$ is considered to have diverged if any component of $\beta_g \in \RR^p$ has absolute value above the threshold $\maxbeta$.
  "18_44_88_113": A boolean array indicating which non zero genes have caused the IRLS algorithm to diverge. Simply passed on during the Fed Proximal Quasi-Newton algorithm, since the server is stateless.
  "19_20_21_22_23_45_46_47_48_49_89_90_91_92_93_114_115_116_117_118": A boolean array indicating which non zero genes have caused the IRLS algorithm to diverge. Passed on without modification.
irls_mask:
  "15_41_85_110": A boolean array indicating which non zero genes are currently being optimized by the IRLS algorithm. Initialized to $\true$.
  "16_42_86_111" : A boolean array indicating which non zero genes are currently being optimized by the IRLS algorithm. Simply passed on.
  "17_43_87_112": A boolean array indicating which non zero genes are currently being optimized by the IRLS algorithm. Genes whose $\beta$ parameter has diverged are removed from the optimization. Moreover, the deviance ratio is computed for each active gene $g$, as $\frac{\left| 2  \text{nll}(\beta_g) - 2 \cdot \text{nll}(\beta_{g, \text{prev}}) \right|}{\left| 2  \text{nll}(\beta) \right| + 0.1} $ where $\beta_{g, \text{prev}}$ is the value of $\beta_{g}$ at the previous iteration. If this deviance is smaller than the user inputed $\texttt{beta\_tol}$, the gene is considered to have converged and is set to \texttt{$\false$} in the \texttt{irls\_mask}, meaning it will not be optimized further.
global_nll:
  "15_41_85_110": For each gene $g$, the negative log likelihood of the negative binomial GLM, initialized at $1000$ for all genes.
  "16_42_86_111": For each gene $g$, the negative log likelihood at the $\beta_g$ parameter. Simply passed on.
  "17_43_87_112": For each gene $g$, the negative log-likelihood at the $\beta_g$ parameter, built by summing the local nlls from the centers.
round_number_irls:
  "15_41_85_110": The current round number of the IRLS algorithm. Initialized at $0$.
  "16_42_86_111": The current round number of the IRLS algorithm. Simply passed on.
  "17_43_87_112": The current round number of the IRLS algorithm, incremented by $1$ during the local step.
local_nll:
  "16_42_86_111": For each gene $g$, the negative log likelihood of the negative binomial GLM with fixed dispersion at the $\beta_g$ parameter, computed on the local data TODO ref equation.
  "18_44_88_113": The nll of the negative binomial GLM with fixed dispersion at the $\beta_g$ parameter, computed on the local data, for each gene $g$ (see CITE EQUATION).
  "20_22_46_48_90_92_115_117": The nll of the negative binomial GLM with fixed dispersion at the $\beta_g$ parameter, computed on the local data, for each gene $g$ and for each potential next step $\beta_g - \stepsize \step_g$ for $\stepsize \in \{1, 1/2, 1/4, ..., 1/2^{\Nls-1}\}$  (see CITE EQUATION).
local_hat_matrix:
  "16_42_64_86_111_121_123": For each gene $g$, the hat matrix  $\hmat_{k,g} = \design_{k}^{\top} \wmat_{k,g} \design_k$ where $\wmat_{k,g} \in \RR^{\nsamples_k \times \nsamples_k}$ is the diagonal matrix with diagonal entries $\frac{\mean_{k,i,g}}{1 + \mean_{k,i,g} \disp_g}$ for $1 \leq i \leq \nsamples_k$. $\disp_g$ is the dispersion estimate of the gene and $\mean_{k,i,g}$ is the expected value of the gene for sample $i$ for parameter $\beta$, that is $\sfactor_{k,g} \exp(\design_{k,i} \cdot \beta_g)$.
local_H_matrix:
  "121": The hat matrix with $\nan$ entries for zero genes, used to compute Wald statistics. Should be merged with hat matrix.
irls_gene_names:
  "16_42_86_111": The gene names of the active genes.
local_fisher:
  "18_44_88_113": For each gene $g$, the Fisher information matrix of the negative binomial GLM with fixed dispersion, $\fisher_{k,g} = \design_{k}^{\top} \wmat_{k,g} \design_k$ where $\wmat_{k,g} \in \RR^{\nsamples_k \times \nsamples_k}$ is the diagonal matrix with diagonal entries $\wmat_{k,g,i,i} = \frac{\mean_{k,i,g}}{1 + \mean_{k,i,g} \disp_g} $ for $1 \leq i \leq \nsamples_k$. $\disp_g$ is the dispersion estimate of the gene and $\mean_{k,i,g}$ is the expected value of the gene $g$ for sample $i$ for parameter $\beta_g$, that is $\sfactor_{k,g} \exp(\design_{k,i} \cdot \beta_g)$.
  "20_22_46_48_90_92_115_117": For each potential step size $\stepsize \in \{1, 1/2, 1/4, ..., 1/2^{\Nls-1}\}$, and each gene $g$, the Fisher information matrix of the negative binomial GLM with fixed dispersion computed at $\beta_g - \stepsize \step_g$. Formally, $\fisher_{k,\stepsize,g} = \design_{k}^{\top} \wmat_{k,\stepsize,g} \design_k$ where $\wmat_{k,\stepsize,g} \in \RR^{\nsamples_k \times \nsamples_k}$ is the diagonal matrix with diagonal entries $\wmat_{k,\stepsize,g,i,i} = \frac{\mean_{k,\stepsize, i,g}}{1 + \mean_{k, \stepsize, i,g} \disp_g} $ for $1 \leq i \leq \nsamples_k$. $\disp_g$ is the dispersion estimate of the gene and $\mean_{k,\stepsize,i,g}$ is the expected value of the gene $g$ for sample $i$ for parameter $\beta_g - \stepsize \step_g$, that is $\sfactor_{k,g} \exp(\design_{k,i} \cdot (\beta_g - \stepsize \step_g))$.
local_gradient:
  "18_44_88_113": For each gene $g$, the gradient of the negative log likelihood of the negative binomial GLM with fixed dispersion at the $\beta_g$ parameter, computed on the local data, i.e., $\nabla_{\beta} \nll_k(\beta_g) =   -\design^{\top}_{k} \counts_{k,g} + \design_k^{\top} \left( \frac{1}{\disp_g} + \counts_{k,g} \right) \frac{\mean_{k,g}}{\frac{1}{\disp_g} + \mean_{k,g}}$, where $\mean_{k,g}$ and $\counts_{k,g}$ are both vectors in $\RR^{\nsamples_k}$ and $\disp_g$ is a scalar. TODO ref equation.
  "20_22_46_48_90_92_115_117": For each potential step size $\delta$ and each gene $g$, the gradient of the negative log likelihood of the negative binomial GLM with fixed dispersion at the $\beta_g - \delta \step_g$ parameter, computed on the local data.
PQN_diverged_mask:
  "18_44_88_113": A boolean array indicating which non zero genes have caused the Proximal Quasi-Newton algorithm to diverge. Initialized to $\texttt{$\false$}$.
  "19_45_89_114": A boolean array indicating which non zero genes have caused the Proximal Quasi-Newton algorithm to diverge. Passed on without modification.
  "20_22_46_48_90_92_115_117": A boolean array indicating which non zero genes have caused the Proximal Quasi-Newton algorithm to diverge. Passed on without modification.
  "21_47_91_116": A boolean array indicating which non zero genes have caused the Proximal Quasi-Newton algorithm to diverge. A gene $g$ is considered to have diverged if for all step sizes $\stepsize \in \{1, 1/2, 1/4, ..., 1/2^{\Nls-1}\}$, and for the computed ascent direction $\step_g$, the Armijo condition is not satisfied, i.e., if $\nll^{\lambda}(\beta_g) - \nll^{\lambda}(\beta_g - \stepsize \step_g) \leq \stepsize ~ \armijo ~ \nabla_{\beta} \nll^{\lambda}(\beta_g) \cdot \step_g$ where $\nll^{\lambda}$ is the regularized negative log likelihood, $\armijo$ is the Armijo parameter which can be set by the user (default is $10^{-4}$), and $\nabla_{\beta} \nll^{\lambda}(\beta_g)$ is the gradient of the regularized negative log likelihood (CITE REF).
  "23_49_93_118": A boolean array indicating which non zero genes have caused the Proximal Quasi-Newton algorithm to diverge. As this is the last step of the optimization, a gene $g$ is considered to have diverged not only if the Armijo condition is never satisfied, but also if the convergence criterion is not met. A gene is said to converge if the relative difference between two successive iterates is smaller than a threshold value $\pqnftol$, i.e., $|\nll^{\lambda}(\beta_g) - \nll^{\lambda}(\beta_{g,\text{prev}})| \leq \pqnftol \max(\nll^{\lambda}(\beta_g), \nll^{\lambda}(\beta_{g,\text{prev}}),1)$.
PQN_mask:
  "18_44_88_113": A boolean array indicating which non zero genes are currently being optimized by the Proximal Quasi-Newton algorithm (active genes). The genes which have diverged during the IRLS algorithm and those which have not converged at the end of the prescribed iterations are set to $\texttt{$\true$}$.
  "19_45_89_114": A boolean array indicating which non zero genes are currently being optimized by the Proximal Quasi-Newton algorithm (active genes),  passed on without modification.
  "20_22_46_48_90_92_115_117": A boolean array indicating which non zero genes are currently being optimized by the Proximal Quasi-Newton algorithm (active genes),  passed on without modification.
  "21_47_91_116": A boolean array indicating which non zero genes are currently being optimized by the Proximal Quasi-Newton algorithm (active genes). Genes that had converged with the relative error criterion (see description of 23 or CITE EQUTION) or diverged (no stepsize satisfying the Armijo condition) have set to $\texttt{$\false$}$.
global_reg_nll:
  "18_44_88_113": The regularized negative log likelihood of the negative binomial GLM with fixed dispersion at the $\beta_g$ parameter, intialized at $\texttt{np.nan}$ since no nll has been computed at this stage.
  "19_45_89_114": The regularized negative log likelihood of the negative binomial GLM with fixed dispersion at the $\beta_g$ parameter, computed as the sum of the local negative log likelihoods with $L^2$ regularization with $\lambda = 10^{-6}$.
  "20_22_46_48_90_92_115_117": The regularized negative log likelihood of the negative binomial GLM with fixed dispersion at the $\beta_g$ parameter, simply passed on.
  "21_47_91_116": The regularized negative log likelihood of the negative binomial GLM with fixed dispersion at the $\beta_g$ parameter, computed as the sum of the local negative log likelihoods with $L^2$ regularization with $\lambda = 10^{-6}$.
newton_decrement_on_mask:
  "18_44_88_113": The newton decrement on the active genes, which is set to $\texttt{None}$ at the beginning.
  "19_45_89_114": The newton decrement on the active genes. It is computed as $\decr_g = \step_g  \cdot \nabla_{\beta} \nll^{\lambda}(\beta_g)$ where $\step_g$ is the ascent direction on the active genes and $\nll^{\lambda}$ is the regularized log likelihood.
  "20_22_46_48_90_92_115_117": The newton decrement on the active genes, passed on without modification.
  "21_47_91_116": The newton decrement on the new active genes $g$, computed at the new $\beta_g$ iterate. For more details, see description of 19.
round_number_PQN:
  "18_44_88_113": The current round number of the Proximal Quasi-Newton algorithm, initialized at $0$.
  "19_45_89_114": The current round number of the Proximal Quasi-Newton algorithm, incremented by $1$.
  "20_22_46_48_90_92_115_117": The current round number of the Proximal Quasi-Newton algorithm, passed on without modification.
  "21_47_91_116": The current round number of the Proximal Quasi-Newton algorithm, incremented by $1$.
ascent_direction_on_mask:
  "18_44_88_113": The ascent direction on the active genes, which is set to $\texttt{None}$ at the beginning.
  "19_45_89_114": The ascent direction on the active genes. To compute the ascent direction, we first compute the global Fisher information matrix for each gene $g$, $\fisher_g = \sum_k \fisher_{k,g}$ and the global gradient $\nabla_{\beta} \nll(\beta_g) = \sum_k \nabla_{\beta} \nll_k(\beta_g)$. From these two quantities, we build the Fisher information and gradients of the regularized negative log likelihood, with $L^2$ regularization $\lambda = 10^{-6}$. We add another regularization term to the Fisher matrix which depends on the iteration number. The goal is for the ascent direction to be close to the gradient for small iterations, and to be close to the real natural gradient descent update near the end of the optimization. The ascent direction is then computed as from the regularized Fisher and gradient using CITE RIGHT EQUATION. Roughly, it is the solution of the linear system $\fisher^{\lambda}_g \step_g = \nabla_{\beta} \nll^{\lambda}(\beta_g)$, where certain components are dropped in to handle boundary conditions as the optimization is constrained to values of $\beta_g$ in $[-\maxbeta,\maxbeta]$.
  "20_22_46_48_90_92_115_117": The ascent direction on the active genes, passed on without modification.
  "21_47_91_116": The ascent direction on the new active genes $g$, computed at the new $\beta_g$ iterate. For more details, see description of 19 or CITE EQUTION.
unique_counts: A pandas series indexed by unique level combinations (all design factor levels that coexist) and containing the number of samples in each level combination. In the single factor case the index will simply be the unique levels of the factor.
counts_by_lvl: A pandas series indexed by the unique levels of the design factors across all centers, and whose values are the number of samples in each level combination.
nll:
  "29_35_99_104": For all genes $g$ and all dispersion values $\disp_g$ in the logarithmic grid between $\mindisp$ $\max(\maxdisp,\nsamples)$ of size $\Ngs$, the negative log likelihood of the negative binomial GLM with fixed mean parameters $\mean_{k,i,g}$ over the set of local samples and dispersion parameter $\disp_g$. If the number of unique levels of all factors is equal to the number of parameters $\nparams$, then $\mean_{k,i,g}$ is defined as $\nan$ for zero genes, and as the minimum of $\sfactor_{k,i}~\design_k^{\top} \gramm^{-1}\xz_g$ and $\minmu:=0.5$ (for the definition of $\gramm$ and $\xz_g$, see step 8). Otherwise, $\mean_{k,i,g}$ is defined as $\sfactor_{k,i}~\exp(\design_{k,i} \cdot \beta_g)$ on non-zero genes, where $\beta_g$ is the log fold change result of the IRLS algorithm, and as $\nan$ on zero genes.
  "31_37_101_106": For all genes $g$ and all dispersion values $\disp_g$ in the logarithmic grid between the exponential of the lower log bound and of the upper log bound of size $\Ngs$, the negative log likelihood of the negative binomial GLM with fixed mean parameters $\mean_{k,i,g}$ over the set of local samples and dispersion parameter $\disp_g$. If the number of unique levels of all factors is equal to the number of parameters $\nparams$, then $\mean_{k,i,g}$ is defined as $\nan$ for zero genes, and as the minimum of $\sfactor_{k,i}~\design_k^{\top} \gramm^{-1}\xz_g$ and $\minmu:=0.5$ (for the definition of $\gramm$ and $\xz_g$, see step 8). Otherwise, $\mean_{k,i,g}$ is defined as $\sfactor_{k,i}~\exp(\design_{k,i} \cdot \beta_g)$ on non-zero genes, where $\beta_g$ is the log fold change result of the IRLS algorithm, and as $\nan$ on zero genes.
CR_summand:
  "29_35_99_104": For all genes $g$ and all dispersion values $\disp_g$ in the logarithmic grid between $\mindisp$ $\max(\maxdisp,\nsamples)$ of size $\Ngs$, the matrix of the Cox-Reid regularization term pertaining to the samples in the center $k$. This matrix is computed as $\CR_{k,g} = \design_k^{\top} \wmat_{k,g} \design_k$ where $\wmat_{k,g} \in \RR^{\nsamples_k \times \nsamples_k}$ is the diagonal matrix with diagonal entries $\frac{\mean_{k,i,g}}{1 + \mean_{k,i,g} \disp_g}$ for $1 \leq i \leq \nsamples_k$. $\mean_{k,i,g}$ is the expected value of the gene for sample $i$, whose expression can be found in the description of the nll variable.
  "31_37_101_106": For all genes $g$ and all dispersion values $\disp_g$ in the logarithmic grid between the exponential of the lower log bound and of the upper log bound of size $\Ngs$, the matrix of the Cox-Reid regularization term pertaining to the samples in the center $k$. This matrix is computed as $\CR_{k,g} = \design_k^{\top} \wmat_{k,g} \design_k$ where $\wmat_{k,g} \in \RR^{\nsamples_k \times \nsamples_k}$ is the diagonal matrix with diagonal entries $\frac{\mean_{k,i,g}}{1 + \mean_{k,i,g} \disp_g}$ for $1 \leq i \leq \nsamples_k$. $\mean_{k,i,g}$ is the expected value of the gene for sample $i$, whose expression can be found in the description of the nll variable.
grid:
  "29_35_99_104": The logarithmic grid between $\mindisp$ and $\max(\maxdisp,\nsamples)$ of size $\Ngs$.
  "31_37_101_106": The logarithmic grid between the exponential of the lower log bound and of the upper log bound of size $\Ngs$.
max_disp: The effective maximum value of the dispersion parameter $\max(\maxdisp,\nsamples)$.
genewise_dispersions:
  "30_32_100_102_132_133": For each gene $g$, the current estimate of the dispersion parameter $\disp_g$. This estimate is computed by first computing the global nll (summing all local nlls)  as well as the global Cox-Reid regularization term, which is half the log determinant of the sum of the local Cox-Reid matrices. The Cox-Reid regularized nll per gene and per dispersion in the grid is obtained by summing the regularization term and the nll. Finally, for every gene, the dispersion parameter is estimated by taking the minizer of this regularized nll on the grid of size $\Ngs$.
  "33": For each gene $g$, the current estimate of the dispersion parameter $\disp_g$, as computed by the grid search.
lower_log_bounds: For each gene $g$, the maximum of the log of the min dispersion and $\alpha_g - \delta$ where $\delta$ is the current mesh size of the grid and $\disp_g$ is the current dispersion estimate. This value will be used as a lower bound for the next grid search for the dispersion parameter.
upper_log_bounds: For each gene $g$, the minimum of the log of the max dispersion and  $\alpha_g + \delta$ where $\delta$ is the current mesh size of the grid and $\disp_g$ is the current dispersion estimate. This value will be used as an upper bound for the next grid search for the dispersion parameter.
mean_normed_counts: For each gene, the mean of the local normed counts, i.e., $\meanncounts_{k,g} = \tfrac{1}{\nsamples_k}\sum_{i=1}^{\nsamples_k}{\ncounts_{k,i,g}}$.
n_obs: The number of samples in the center.
n_params: The number of parameters in the design matrix, i.e., its number of columns.
prior_disp_var: A prior on the variance of the log dispersions around the log trend curve $\priordispvar$, estimated as the maximum between $0.25$ and $\squaredlogres - \trigamma((\nsamples-\nparams)/2)$, where $\trigamma(f/2)$ is the variance of the log of a $\chi^2_f$ distribution. For more details, see CITE EQUATION IN DESEQ2 PAPER.
_squared_logres: The squared mean absolute deviation of the difference between the log of the genewise dispersions and the log of the fitted dispersions, restricted to the non-zero genes whose gene-wise dispersions are above $100\times \mindisp$. The mean absolute deviation estimate is defined as the median of the absolute difference between the log residual and its median, scaled by the percent point function of the normal distribution at $0.75$.
trend_coeffs: The coefficients of the trend curve fitted to the dispersions. We model the dispersions $\alpha_g$ of the gene $g$ as a sample from an exponential distribution whose mean $\disptrend(\meanncounts_g)$ is a function of $\meanncounts_g$ parametrized by two coefficients $\intercepttrend$ and $\slopetrend$; $\disptrend(\meanncounts_g) = \intercepttrend + \tfrac{\slopetrend}{\meanncounts_g}$. $\disptrend$ is called the trend curve. The coefficients are $(\intercepttrend, \slopetrend)$, and are obtained by starting with the set of non zero genes  and by iteratively i) minimizing the negative log likelihood of the exponential distribution on the set of genes with LBFGS-B and ii) removing the genes where the ratio between the dispersion $\alpha_g$ and the trend curve $\disptrend(\meanncounts_g)$ is above $15$ or below $10^{-4}$ (we consider these genes as outliers to this model), until the set of genes is stable. See CITE DESEQ2 PAPER FOR MORE INFO.
fitted_dispersions: For each gene $g$ with zero counts across all centers, $\nan$. For each non-zero gene $g$, either $\disptrend(\meanncounts_g)$ if the disp\_function\_type is "parametric" (i.e., the fitting of the parameters has converged), or $\meandisp$ otherwise (i.e., if the disp\_function\_type is "mean"). Denoted with $\fitteddisp_g$.
disp_function_type: The type of the dispersion function used to model the dispersions. It can be either "parametric", if the iterative scheme to fit the trend curve has converged, the LBFGS-B method used to fit the parameters has converged, and the coefficienst of the trend curve are non-negative; or "mean" otherwise.
mean_disp: None if the dispersion function type is "parametric", and the trimmed mean of the genewise dispersions whose value is above $10\times \mindisp$, with trimming proportion $0.001$ otherwise.
reg:
  "35_104": For all genes $g$ and all dispersion values $\disp_g$ in the logarithmic grid between $\mindisp$ and $\max(\maxdisp,\nsamples)$ of size $\Ngs$, a regularization term that is equal to $0.5 \times (\log(\alpha_g) - \log(\fitteddisp_g))^2/\priordispvar$, and which comes from the prior on the distribution of the log dispersions around the trend curve.
  "37_106": For all genes $g$ and all dispersion values $\disp_g$ in the logarithmic grid between the exponential of the lower log bound and of the upper log bound of size $\Ngs$, a regularization term that is equal to $0.5 \times (\log(\alpha_g) - \log(\fitteddisp_g))^2/\priordispvar$, and which comes from the prior on the distribution of the log dispersions around the trend curve.
MAP_dispersions:
  "36_38_105_107_132_133": For each gene $g$, the current estimate of the MAP dispersion parameter $\disp_g$. This estimate is computed by first computing the global nll (summing all local nlls)  as well as the global Cox-Reid regularization term, which is half the log determinant of the sum of the local Cox-Reid matrices, and the regularization coming from the prior on the log dispersions around the trend curve. The Cox-Reid, prior regularized nll per gene and per dispersion in the grid is obtained by summing the regularization terms and the nll. Finally, for every gene, the MAP dispersion parameter is estimated by taking the minizer of this regularized nll on the grid of size $\Ngs$.
i_trimmed_mean:
  "51": Let $\admissiblelevels$ bet the set of levels $1 \leq l \leq \nlevels$ of the design matrix with at least $3$ replicates across all centers. Let $\levelset_{k,l}$ denote the set of sample indices $1 \leq i \leq \nsamples_k$ in center $k$ whose line in the design corresponds to level $l$. Dictionary with two keys. \newline "max\_values", which is a numpy array of shape $\ngenes$ containing, for each gene $g$, the maximum value of the center normed counts for $g$ on samples in $\levelset_{k,l}$, denoted with $\maxncounts_{k,g,l}$. \newline "min\_values", which is a numpy array of shape $\ngenes$ containing, for each gene $g$, the minimum value of the center normed counts for $g$ on samples in $\levelset_{k,l}$, denoted with $\minncounts_{k,g,l}$.
  "52": Dictionary with two keys. \newline "upper\_bounds\_thresholds" is a numpy array of shape $(\ngenes, 2)$. For each gene $g$ and for each ratio $\ratio \in \{\trimratio, 1 - \trimratio\}$, will contain an upper bound of the $\ratio$-quantile value of the normed counts of gene $g$ across samples in level $l$. Initialized for both ratios as the maximum of the normed counts of gene $g$ across all samples in level $l$, computed as $\max_k \maxncounts_{k,g,l}$. \newline "lower\_bounds\_thresholds" is a numpy array of shape $(\ngenes, 2)$. For each gene $g$ and for each ratio $\ratio \in \{\trimratio, 1 - \trimratio\}$, will contain a lower bound of the $\ratio$-quantile value of the normed counts of gene $g$ across samples in level $l$. Initialized for both ratios as the minimum of the normed counts of gene $g$ across all samples in level $l$, computed as $\min_k \minncounts_{k,g,l}$.
  "53": Dictionary with the following keys. \newline "num\_strictly\_above" is a numpy array of shape $(\ngenes, 2)$. For each gene $g$ and each ratio $\ratio$, contains the number of samples in the center and in the level whose normed counts value for gene $g$ is strictly above the average of the upper and lower  bounds on the $\ratio$-quantile value of gene $g$. \newline "upper\_bounds\_thresholds" is a numpy array of shape $(\ngenes, 2)$, simply passed on from the previous state. \newline "lower\_bounds\_thresholds" is a numpy array of shape $(\ngenes, 2)$ simply passed on from the previous state. \newline "n\_samples" is the number of samples in level $l$ and center $k$. \newline "trim\_ratio" is the trim ration, defining the upper and lower ratios whose quantile we want to compute. Denoted with $\trimratio$, equal to $0.125$.
  "54": Dictionary with two keys. \newline "upper\_bounds\_thresholds" is a numpy array of shape $(\ngenes, 2)$. For each gene $g$ and for each ratio $\ratio \in \{\trimratio, 1 - \trimratio\}$, contains an updated upper bound of the $\ratio$-quantile value of the normed counts of gene $g$ across samples in level $l$. For a given gene $g$ and $\ratio$-quantile, it is updated as either its previous value or the average of the previous upper and lower bounds across samples in level $l$, depending on the number of samples in the level whose normed counts value is strictly above this average. This number of samples can be computed from the previous shared states. \newline "lower\_bounds\_thresholds" is a numpy array of shape $(\ngenes, 2)$. For each gene $g$ and for each ratio $\ratio \in \{\trimratio, 1 - \trimratio\}$, contains an updated lower bound of the $\ratio$-quantile value of the normed counts of gene $g$ across samples in level $l$. For a given gene $g$ and $\ratio$-quantile, it is updated as either its previous value or the average of the previous upper and lower bounds across samples in level $l$, depending on the number of samples in the level whose normed counts value is strictly above this average. This number of samples can be computed from the previous shared states.
  "55": Dictionary with the following keys. \newline "trimmed\_local\_sum" is a numpy array of shape $(\ngenes,)$. For each gene $g$ and each ration $\ratio \in \{\trimratio, 1 - \trimratio\}$, we approximate the $\ratio$-quantile by taking the average of the running upper and lower bounds. The trimmed local sum is computed as the sum of the normed counts across all samples in level $l$ and center $k$, whose value is strictly above the approximation of the $\trimratio$-quantile and less or equal to the approximation of the $1-\trimratio$ quantile. \newline "n\_samples" is the number of samples in level $l$ and center $k$. \newline "num\_strictly\_above" is a numpy array of shape $(\ngenes, 2)$. For each gene $g$ and each ratio $\ratio$, contains the number of samples in the center and in the level whose normed counts value for gene $g$ is strictly above the approximation of the $\ratio$-quantile. \newline "upper\_bounds\_thresholds" is a numpy array of shape $(\ngenes, 2)$, simply passed on from the previous state. \newline "lower\_bounds\_thresholds" is a numpy array of shape $(\ngenes, 2)$ simply passed on from the previous state. "trim\_ratio", equal to $0.125$.
  "58": Let $\admissiblelevels$ bet the set of levels $1 \leq l \leq \nlevels$ of the design matrix with at least $3$ replicates across all centers. Let $\levelset_{k,l}$ denote the set of sample indices $1 \leq i \leq \nsamples_k$ in center $k$ whose line in the design corresponds to level $l$. Let $\sqerror_k$ be the matrix of square errors of size $(\nsamples,\ngenes)$ whose entries are $(\ncounts_{k,i,g} - \trimmedmean_{g,l})^2$ if $i \in \levelset_{k,l}$ for some $l \in \admissiblelevels$ and $\nan$ otherwise, for $1 \leq i\leq \nsamples_k$ and $1 \leq g \leq \ngenes$. Dictionary with two keys. \newline "max\_values", which is a numpy array of shape $\ngenes$ containing, for each gene $g$, the maximum value of the center squared errors for $g$ on samples in $\levelset_{k,l}$, denoted with $\maxsqerrors_{k,g,l}$. \newline "min\_values", which is a numpy array of shape $\ngenes$ containing, for each gene $g$, the minimum value of the center squared errors for $g$ on samples in $\levelset_{k,l}$, denoted with $\minsqerrors_{k,g,l}$.
  "59": Dictionary with two keys. \newline "upper\_bounds\_thresholds" is a numpy array of shape $(\ngenes, 2)$. For each gene $g$ and for each ratio $\ratio \in \{\trimratio, 1 - \trimratio\}$, will contain an upper bound of the $\ratio$-quantile value of the squared errors of gene $g$ across samples in level $l$. Initialized for both ratios as the maximum of the squared errors of gene $g$ across all samples in level $l$, computed as $\max_k \maxsqerrors_{k,g,l}$. \newline "lower\_bounds\_thresholds" is a numpy array of shape $(\ngenes, 2)$. For each gene $g$ and for each ratio $\ratio \in \{\trimratio, 1 - \trimratio\}$, will contain a lower bound of the $\ratio$-quantile value of the squared errors of gene $g$ across samples in level $l$. Initialized for both ratios as the minimum of the squared errors of gene $g$ across all samples in level $l$, computed as $\min_k \minsqerrors_{k,g,l}$.
  "60": Dictionary with the following keys. \newline "num\_strictly\_above" is a numpy array of shape $(\ngenes, 2)$. For each gene $g$ and each ratio $\ratio$, contains the number of samples in the center and in the level whose squared errors value for gene $g$ is strictly above the average of the upper and lower  bounds on the $\ratio$-quantile value of gene $g$. \newline "upper\_bounds\_thresholds" is a numpy array of shape $(\ngenes, 2)$, simply passed on from the previous state. \newline "lower\_bounds\_thresholds" is a numpy array of shape $(\ngenes, 2)$ simply passed on from the previous state. \newline "n\_samples" is the number of samples in level $l$ and center $k$. \newline "trim\_ratio" is the trim ration, defining the upper and lower ratios whose quantile we want to compute. Denoted with $\trimratio$, equal to $0.125$.
  "61": Dictionary with two keys. \newline "upper\_bounds\_thresholds" is a numpy array of shape $(\ngenes, 2)$. For each gene $g$ and for each ratio $\ratio \in \{\trimratio, 1 - \trimratio\}$, contains an updated upper bound of the $\ratio$-quantile value of the squared errors of gene $g$ across samples in level $l$. For a given gene $g$ and $\ratio$-quantile, it is updated as either its previous value or the average of the previous upper and lower bounds across samples in level $l$, depending on the number of samples in the level whose squared errors value is strictly above this average. This number of samples can be computed from the previous shared states. \newline "lower\_bounds\_thresholds" is a numpy array of shape $(\ngenes, 2)$. For each gene $g$ and for each ratio $\ratio \in \{\trimratio, 1 - \trimratio\}$, contains an updated lower bound of the $\ratio$-quantile value of the squared errors of gene $g$ across samples in level $l$. For a given gene $g$ and $\ratio$-quantile, it is updated as either its previous value or the average of the previous upper and lower bounds across samples in level $l$, depending on the number of samples in the level whose squared errors value is strictly above this average. This number of samples can be computed from the previous shared states.
  "62": Dictionary with the following keys. \newline "trimmed\_local\_sum" is a numpy array of shape $(\ngenes,)$. For each gene $g$ and each ration $\ratio \in \{\trimratio, 1 - \trimratio\}$, we approximate the $\ratio$-quantile by taking the average of the running upper and lower bounds. The trimmed local sum is computed as the sum of the squared errors across all samples in level $l$ and center $k$, whose value is strictly above the approximation of the $\trimratio$-quantile and less or equal to the approximation of the $1-\trimratio$ quantile. \newline "n\_samples" is the number of samples in level $l$ and center $k$. \newline "num\_strictly\_above" is a numpy array of shape $(\ngenes, 2)$. For each gene $g$ and each ratio $\ratio$, contains the number of samples in the center and in the level whose squared errors value for gene $g$ is strictly above the approximation of the $\ratio$-quantile. \newline "upper\_bounds\_thresholds" is a numpy array of shape $(\ngenes, 2)$, simply passed on from the previous state. \newline "lower\_bounds\_thresholds" is a numpy array of shape $(\ngenes, 2)$ simply passed on from the previous state. "trim\_ratio", equal to $0.125$. \newline "scale", equal to $1.51$.
max_values:
  "69": Contains the maximum value of the center normed counts for each gene to replace $g$ across all samples.
min_values:
  "69": Contains the minimum value of the center normed counts for each gene to replace $g$  across all samples.
upper_bounds_thresholds:
  "70": Contains an upper bound of the $\trimratio$-quantile value of the normed counts for each gene to replace $g$ across all samples. for each gene to replace $g$, the first entry is the upper bound of the $\trimratio$-quantile value, and the second entry is the upper bound of the $1-\trimratio$-quantile value, where $\trimratio=0.2$.
  "71": Simply passed on from the previous state.
  "72": for each gene to replace $g$ and for each ratio $\ratio \in \{\trimratio, 1 - \trimratio\}$, contains an updated upper bound of the $\ratio$-quantile value of the normed counts of gene $g$ across all samples. For a given gene $g$ and $\ratio$-quantile, it is updated as either its previous value or the average of the previous upper and lower bounds across all samples, depending on the number of samples whose normed counts value is strictly above this average. This number of samples can be computed from the previous shared states.
  "73": Simply passed on from the previous state.
lower_bounds_thresholds:
  "70": Contains a lower bound of the $\trimratio$-quantile value of the normed counts for each gene to replace $g$ across all samples. for each gene to replace $g$, the first entry is the lower bound of the $\trimratio$-quantile value, and the second entry is the lower bound of the $1-\trimratio$-quantile value, where $\trimratio=0.2$.
  "71": Simply passed on from the previous state.
  "72": for each gene to replace $g$ and for each ratio $\ratio \in \{\trimratio, 1 - \trimratio\}$, contains an updated lower bound of the $\ratio$-quantile value of the normed counts of gene $g$ across all samples. For a given gene $g$ and $\ratio$-quantile, it is updated as either its previous value or the average of the previous upper and lower bounds across all samples, depending on the number of samples whose normed counts value is strictly above this average. This number of samples can be computed from the previous shared states.
  "73": Simply passed on from the previous state.
num_strictly_above:
  "71": Contains the number of samples whose normed counts value for each gene to replace $g$ is strictly above the average of the upper and lower bounds on the $\trimratio$-quantile value of gene $g$ across all samples. for each gene to replace $g$, the first entry is the number of samples whose normed counts value is strictly above the average of the upper and lower bounds on the $\trimratio$-quantile value, and the second entry is the number of samples whose normed counts value is strictly above the average of the upper and lower bounds on the $1-\trimratio$-quantile value, where $\trimratio=0.2$.
  "73": Contains the number of samples whose normed counts value for each gene to replace $g$ is strictly above the average of the upper and lower bounds on the $\trimratio$-quantile value of gene $g$ across all samples. for each gene to replace $g$, the first entry is the number of samples whose normed counts value is strictly above the average of the upper and lower bounds on the $\trimratio$-quantile value, and the second entry is the number of samples whose normed counts value is strictly above the average of the upper and lower bounds on the $1-\trimratio$-quantile value, where $\trimratio=0.2$.
trim_ratio:
  "71": The trim ratio, defining the upper and lower ratios whose quantile we want to compute. Denoted with $\trimratio$, equal to $0.2$.
  "73": the trim ratio, set to $0.2$
trimmed_local_sum:
  "73": A numpy array of shape $(\ngenes,)$ containing the sum of the normed counts across all samples, whose value is strictly above the approximation of the $\trimratio$-quantile and less or equal to the approximation of the $1-\trimratio$ quantile. For each gene to replace $g$, the entry is the trimmed local sum.
use_lvl:
  "51": Whether or not to use the levels of the design matrix to compute the trimmed mean. If use\_lvl is $\true$, then one trimmed mean of the normed counts will be computed for each gene and for each level of the design matrix (that is the trimmed mean will be performed on the samples corresponding to the same level of the design matrix across all centers). If use\_lvl is $\false$, then one trimmed mean of the normed counts will be computed for each gene and for all samples. This parameter is set to $\true$ if there is at least one level of the design matrix with more than 3 replicates across all centers, and to $\false$ otherwise.
  "52_53_54_55": Whether or not to use the levels of the design matrix to compute the trimmed mean. Passed on without modification.
  "58": Whether or not to use the levels of the design matrix to compute the trimmed mean. If use\_lvl is $\true$, then one trimmed mean of the squared errors will be computed for each gene and for each level of the design matrix (that is the trimmed mean will be performed on the samples corresponding to the same level of the design matrix across all centers). If use\_lvl is $\false$, then one trimmed mean of the squared errors will be computed for each gene and for all samples. This parameter is set to $\true$ if there is at least one level of the design matrix with more than 3 replicates across all centers, and to $\false$ otherwise.
  "59_60_61_62": Whether or not to use the levels of the design matrix to compute the trimmed mean. Passed on without modification.
  "69": Whether or not to use the levels of the design matrix to compute the trimmed mean. Set to $\false$ in this case, so that the trimmed mean is computed across all samples.
  "70_71_72_73": Set to $\false$ in this case, simply passed on from the previous state.
trimmed_mean_normed_counts:
  "56": For each gene $g$ and each level $l \in \admissiblelevels$, the corresponding entry $\trimmedmean_{g,l}$ is the approximation of the trimmed mean of the normed counts for gene $g$ and samples whose line in the design corresponds to level $l$ with trim ratio $\trimratio$, computed by summing the trimmed\_local\_sums and dividing by the sum of the local n\_samples for the corresponding gene and level.
  "74": For each gene to replace $g$, the trimmed mean of the normed counts across all samples, denoted with $\trimmedmean_{g}$, with trim ratio set to $0.2$.
varEst:
  "63": For each gene $g$, the trimmed variance estimate of the normed counts, denoted with $\varest_g$. If use\_lvl is $\true$, for each gene $g$, it is the maximum across all admissible levels of the trimmed mean of the squared error for the gene and level in question, with trim ratio $\trimratio$, scaled (multiplied) by the scale factor $1.51$. If use\_level is $\false$, the trimmed mean of the squared error scaled by $1.51$ with trim ratio $\trimratio$.
  "64": For each gene $g$, the trimmed variance estimate of the normed counts, denoted with $\varest_g$. This quantitiy is passed on from the previous shared state.
  "121_123": For each gene $g$, the trimmed variance estimate of the normed counts, denoted with $\varest_g$. This quantitiy is retrieved from the current local state.
_skip_cooks: A boolean indicating whether to skip the computation of the intermediate quantities to compute the  of the Cook's distance. This is set to $\true$ if the Cook's distance is stored in the local state (which is not the case by default due to memory issues). Otherwise, it is set to $\false$ (default behaviour).
global_hat_matrix_inv: For each gene $g$, we compute the global hat matrix as the sum of the local hat matrices, and its inverse.
cooks_dispersions: For each gene $g$, a robust estimate of the dispersion parameter $\dispcooks_g$ computed from the trimmed variance estimate and the global mean of the normed counts. We compute this estimate as $\max((\varest_g- \countsmean_g)/\countsmean_g^2,0.04)$.
replaceable_samples: A boolean indicating if there are any replaceable samples in the center. A sample $i$ of center $k$ is said to be replaceable if there are at least $\minreplicates$ samples across all centers which share the same design factor levels as $i$. $\minreplicates$ is a user defined parameter, set to $7$ by default.
local_genes_to_replace: The set of genes $g$ for which the Cook's distance is above the cutoff value for any sample in the center. For a given gene $g$ and given sample $i$, the Cook's distance is computed as $\tfrac{\hatdiag_{k,i,g}}{\nparams (1-\hatdiag_{k,i,g})^2}~\squaredpres_{k,i,g}$ where $\squaredpres_{k,i,g}$ is the squared Pearson residual of the negative binomial GLM with log fold changes $\beta_g$ and dispersions $\dispcooks_g$, computed as $(\counts_{k,i,g} - \mean_{k,i,g})^2/\varnb_{k,i,g}$, and $\hatdiag_{k,i,g}$ is the $i$-th diagonal element of $\design_k \hmat^{-1}_{g} \design_k^{\top}$, where $\hmat^{-1}_{g}$ is the inverse of the global hat matrix. The cutoff value is set to the $0.99$-th quantile of the F-distribution with $\nparams$ and $\nsamples-\nparams$ degrees of freedom. Here, $\mean_{k,i,g} = \sfactor_{k,i}~\exp(\design_{k,i} \cdot \beta_g)$ and $\varnb_{k,i,g} = \mean_{k,i,g} (1 + \mean_{k,i,g} \dispcooks_g)$.
genes_to_replace: The set of genes $g$ for which the Cook's distance is above the cutoff value for any sample in any center (the union of the local genes to replace across all centers).
loc_new_all_zeroes: A boolean array which for each gene to replace $g$ indicates if the new count matrix of the center is all zeroes (across samples) for this gene (the new count matrix is computed by imputing the Cook's outliers with the trimmed mean of the normed counts times the size factor).
new_all_zeroes: A boolean array which for each gene to replace $g$ indicates if all counts across all centers are zero for this gene.
LFC: The log fold changes of the gene expression. This dataframe is indexed by genes on one hand, and by design column names on the other.
contrast_vector: The contrast vector to apply to the LFC to get the desired log fold change corresponding to the input contrast of the form Of the form $\texttt{[factor, level1, level2]}$.
wald_se:
  "122": For each gene, the standard error on the log fold change value for the given contrast given by the GLM.
  "129": For each gene, the standard error on the log fold change value for the given contrast given by the GLM. Stored in the local state.
  "130": For each gene, the standard error on the log fold change value for the given contrast given by the GLM. Passed on without modification.
  "132" : For each gene, the standard error on the log fold change value for the given contrast given by the GLM.
  "133": For each gene, the standard error on the log fold change value for the given contrast given by the GLM.
wald_statistics:
  "122": For each gene, the Wald statistic of the gene expression. This statistics depends on the $\lfcnull$ parameter which sets the null hypothesis on the log fold change (set to $0$ by default), and the $\althyp$ parameter, which defines the alternative hypothesis on the log fold change (set to $\None$ by default, can be $\greater, ~\greaterabs, ~\less,~ \lessabs$). If the alternative hypothesis is $\None$, then the Wald statistic is computed as the centered normalized log fold change. For more details, see CITE REF
  "129": For each gene, the Wald statistic of the gene expression. Stored in the local state.
  "130": For each gene, the Wald statistic of the gene expression. Passed on without modification.
  "132": For each gene, the Wald statistic of the gene expression.
  "133": For each gene, the Wald statistic of the gene expression.
p_values:
  "122": For each gene, the p-value of the Wald statistic, computed from the survival function of the normal distribution applied to the wald statistic.
  "129": For each gene, the p-value of the Wald statistic, computed from the survival function of the normal distribution applied to the wald statistic. Stored in the local state.
  "130": If Cook's filtering is enabled (which is the case by default with the $\cooksfiltering $ parameter), then the p-values of genes which have $\leq 2$ samples above the gene count of the sample maximizing the Cook's distance across all centers are set to $\nan$. Otherwise, passed on without modification.
  "132": For each gene, the p-value of the Wald statistic, computed from the survival function of the normal distribution applied to the wald statistic, and set to $\nan$ if the gene is a Cook's outlier if $\cooksfiltering$ is enabled.
  "133": For each gene, the p-value of the Wald statistic, computed from the survival function of the normal distribution applied to the wald statistic, and set to $\nan$ if the gene is a Cook's outlier if $\cooksfiltering$ is enabled.
cooks_cutoff: The cutoff value for the Cook's distance, set to the $0.99$-th quantile of the F-distribution with $\nparams$ and $\nsamples-\nparams$ degrees of freedom.
local_cooks_outliers: A boolean array which for each gene $g$ indicates if the Cook's distance is above the cutoff value for any sample in the center which i) has not been replaced by an imputation value if Cook's outliers have been refitted and ii) has at least three replicates across all centers.
cooks_outliers:
  "124": A boolean array which for each gene $g$ indicates if the gene is a local Cook's outlier in any center. Computed from the local cooks outliers across all centers.
  "125_126_127_128_129": A boolean array which for each gene $g$ indicates if the gene is a Cook's outlier in any center. Passed on without modification.
local_max_cooks: For each gene $g$ which has a Cook's outlier, the maximum Cook's distance across all samples in the center, if there is one above the cutoff value. Otherwise, $0$.
max_cooks: For each gene $g$ which has a Cook's outlier, the maximum Cook's distance across all samples in all centers, if there is one above the cutoff value. Otherwise, $0$. Computed from the local max cooks across all centers.
local_max_cooks_gene_counts: A masked array where for each gene $g$ with a Cook's outliers, the gene is masked if the sample maximizing the Cook's distance is not in the center, and the count value of the sample maximizing the Cook's distance otherwise.
max_cooks_gene_counts: A masked array where for each gene $g$ with a Cook's outliers, we have the minimum of the counts maximizing the Cook's distance across all centers. Should not be masked.
local_num_samples_above: For each gene $g$ which has a Cook's outlier, the number of samples in the center whose gene count for gene $g$ is above the gene count of the sample maximizing the Cook's distance across all centers for that gene.
replaced: A boolean array marking genes $g$ for which the Cook's distance is above the cutoff value for any sample in any center (the union of the local genes to replace across all centers).
gene_names: The gene names.
dispersions: The estimated dispersions for each gene, which are the MAP dispersions if the gene is not an outlier w.r.t. the trend curve, and the gene-wise dispersions otherwise.
padj: The adjusted p-values for each gene, computed from the p-values using independent filtering if the $\independentfilter$ parameter is $\true$ (default), and the Benjamini-Hochberg procedure otherwise.
refitted: A boolean array marking genes which can be replaced and which, after replacing the count value by the imputation value, are non-zero.
